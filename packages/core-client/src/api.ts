/* tslint:disable */
/* eslint-disable */
/**
 * Core Service
 * Open API Specification for Parker\'s \"Core\" Service
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ypodeswa@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base'

/**
 * Payload to create a parking spot
 * @export
 * @interface CreateParkingSpotRequestDto
 */
export interface CreateParkingSpotRequestDto {
  /**
   *
   * @type {string}
   * @memberof CreateParkingSpotRequestDto
   */
  ownerUserId: string
  /**
   *
   * @type {PointDto}
   * @memberof CreateParkingSpotRequestDto
   */
  location: PointDto
}
/**
 *
 * @export
 * @interface CreateUserRequestDto
 */
export interface CreateUserRequestDto {
  /**
   *
   * @type {string}
   * @memberof CreateUserRequestDto
   */
  fullName: string
  /**
   *
   * @type {string}
   * @memberof CreateUserRequestDto
   */
  email: string
}
/**
 *
 * @export
 * @interface ListParkingSpotsResponseDto
 */
export interface ListParkingSpotsResponseDto {
  /**
   *
   * @type {Array<ParkingSpotDto>}
   * @memberof ListParkingSpotsResponseDto
   */
  data: Array<ParkingSpotDto>
  /**
   *
   * @type {PaginationDto}
   * @memberof ListParkingSpotsResponseDto
   */
  pagination: PaginationDto
}
/**
 * Pagination response
 * @export
 * @interface PaginationDto
 */
export interface PaginationDto {
  /**
   * Can be used to fetch the next page.
   * @type {string}
   * @memberof PaginationDto
   */
  next?: string
  /**
   * Can be used to fetch the previous page.
   * @type {string}
   * @memberof PaginationDto
   */
  previous?: string
}
/**
 * A parking spot
 * @export
 * @interface ParkingSpotDto
 */
export interface ParkingSpotDto {
  /**
   *
   * @type {string}
   * @memberof ParkingSpotDto
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof ParkingSpotDto
   */
  ownerUserId: string
  /**
   *
   * @type {PointDto}
   * @memberof ParkingSpotDto
   */
  location: PointDto
}
/**
 * A geographic point (latitude/longitude coordinate)
 * @export
 * @interface PointDto
 */
export interface PointDto {
  /**
   *
   * @type {number}
   * @memberof PointDto
   */
  latitude: number
  /**
   *
   * @type {number}
   * @memberof PointDto
   */
  longitude: number
}
/**
 *
 * @export
 * @interface UpdateParkingSpotRequestDto
 */
export interface UpdateParkingSpotRequestDto {
  /**
   *
   * @type {PointDto}
   * @memberof UpdateParkingSpotRequestDto
   */
  location?: PointDto
}
/**
 *
 * @export
 * @interface UpdateUserRequestDto
 */
export interface UpdateUserRequestDto {
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequestDto
   */
  fullName?: string
  /**
   *
   * @type {string}
   * @memberof UpdateUserRequestDto
   */
  email?: string
}
/**
 * A user
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  fullName: string
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  email: string
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Delete a parking spot.
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteParkingSpotsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteParkingSpotsId', 'id', id)
      const localVarPath = `/parkingSpots/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete a user.
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteUsersId', 'id', id)
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List parking spots closest to a point.
     * @summary Your GET endpoint
     * @param {number} latitude
     * @param {number} longitude
     * @param {number} limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParkingSpotsClosestToPoint: async (
      latitude: number,
      longitude: number,
      limit: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'latitude' is not null or undefined
      assertParamExists('getParkingSpotsClosestToPoint', 'latitude', latitude)
      // verify required parameter 'longitude' is not null or undefined
      assertParamExists('getParkingSpotsClosestToPoint', 'longitude', longitude)
      // verify required parameter 'limit' is not null or undefined
      assertParamExists('getParkingSpotsClosestToPoint', 'limit', limit)
      const localVarPath = `/parkingSpots/closestToPoint`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (latitude !== undefined) {
        localVarQueryParameter['latitude'] = latitude
      }

      if (longitude !== undefined) {
        localVarQueryParameter['longitude'] = longitude
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a parking spot by id.
     * @summary Your GET endpoint
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParkingSpotsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getParkingSpotsId', 'id', id)
      const localVarPath = `/parkingSpots/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get a user by id.
     * @summary Get User Info by User ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUsersId', 'id', id)
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update the parking spot\'s data.
     * @summary
     * @param {string} id
     * @param {UpdateParkingSpotRequestDto} [updateParkingSpotRequestDto] Updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchParkingSpotsId: async (
      id: string,
      updateParkingSpotRequestDto?: UpdateParkingSpotRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('patchParkingSpotsId', 'id', id)
      const localVarPath = `/parkingSpots/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateParkingSpotRequestDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update a user\'s data.
     * @summary Update User Information
     * @param {string} id
     * @param {UpdateUserRequestDto} [updateUserRequestDto] Updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUsersId: async (
      id: string,
      updateUserRequestDto?: UpdateUserRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('patchUsersId', 'id', id)
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create a parking spot.
     * @summary
     * @param {CreateParkingSpotRequestDto} [createParkingSpotRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postParkingSpots: async (
      createParkingSpotRequestDto?: CreateParkingSpotRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/parkingSpots`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createParkingSpotRequestDto,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create a new user.
     * @summary Create New User
     * @param {CreateUserRequestDto} [createUserRequestDto] Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUsers: async (
      createUserRequestDto?: CreateUserRequestDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/xml'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createUserRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     * Delete a parking spot.
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteParkingSpotsId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParkingSpotsId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Delete a user.
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUsersId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsersId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * List parking spots closest to a point.
     * @summary Your GET endpoint
     * @param {number} latitude
     * @param {number} longitude
     * @param {number} limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getParkingSpotsClosestToPoint(
      latitude: number,
      longitude: number,
      limit: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParkingSpotsResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getParkingSpotsClosestToPoint(
        latitude,
        longitude,
        limit,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Get a parking spot by id.
     * @summary Your GET endpoint
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getParkingSpotsId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpotDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getParkingSpotsId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Get a user by id.
     * @summary Get User Info by User ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsersId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersId(id, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update the parking spot\'s data.
     * @summary
     * @param {string} id
     * @param {UpdateParkingSpotRequestDto} [updateParkingSpotRequestDto] Updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchParkingSpotsId(
      id: string,
      updateParkingSpotRequestDto?: UpdateParkingSpotRequestDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpotDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchParkingSpotsId(
        id,
        updateParkingSpotRequestDto,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Update a user\'s data.
     * @summary Update User Information
     * @param {string} id
     * @param {UpdateUserRequestDto} [updateUserRequestDto] Updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUsersId(
      id: string,
      updateUserRequestDto?: UpdateUserRequestDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchUsersId(id, updateUserRequestDto, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Create a parking spot.
     * @summary
     * @param {CreateParkingSpotRequestDto} [createParkingSpotRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postParkingSpots(
      createParkingSpotRequestDto?: CreateParkingSpotRequestDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParkingSpotDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postParkingSpots(createParkingSpotRequestDto, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     * Create a new user.
     * @summary Create New User
     * @param {CreateUserRequestDto} [createUserRequestDto] Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUsers(
      createUserRequestDto?: CreateUserRequestDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postUsers(createUserRequestDto, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     * Delete a parking spot.
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteParkingSpotsId(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteParkingSpotsId(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Delete a user.
     * @summary
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersId(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteUsersId(id, options).then((request) => request(axios, basePath))
    },
    /**
     * List parking spots closest to a point.
     * @summary Your GET endpoint
     * @param {number} latitude
     * @param {number} longitude
     * @param {number} limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParkingSpotsClosestToPoint(
      latitude: number,
      longitude: number,
      limit: number,
      options?: any
    ): AxiosPromise<ListParkingSpotsResponseDto> {
      return localVarFp
        .getParkingSpotsClosestToPoint(latitude, longitude, limit, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get a parking spot by id.
     * @summary Your GET endpoint
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParkingSpotsId(id: string, options?: any): AxiosPromise<ParkingSpotDto> {
      return localVarFp.getParkingSpotsId(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Get a user by id.
     * @summary Get User Info by User ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersId(id: string, options?: any): AxiosPromise<UserDto> {
      return localVarFp.getUsersId(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Update the parking spot\'s data.
     * @summary
     * @param {string} id
     * @param {UpdateParkingSpotRequestDto} [updateParkingSpotRequestDto] Updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchParkingSpotsId(
      id: string,
      updateParkingSpotRequestDto?: UpdateParkingSpotRequestDto,
      options?: any
    ): AxiosPromise<ParkingSpotDto> {
      return localVarFp
        .patchParkingSpotsId(id, updateParkingSpotRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Update a user\'s data.
     * @summary Update User Information
     * @param {string} id
     * @param {UpdateUserRequestDto} [updateUserRequestDto] Updates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUsersId(id: string, updateUserRequestDto?: UpdateUserRequestDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp.patchUsersId(id, updateUserRequestDto, options).then((request) => request(axios, basePath))
    },
    /**
     * Create a parking spot.
     * @summary
     * @param {CreateParkingSpotRequestDto} [createParkingSpotRequestDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postParkingSpots(
      createParkingSpotRequestDto?: CreateParkingSpotRequestDto,
      options?: any
    ): AxiosPromise<ParkingSpotDto> {
      return localVarFp
        .postParkingSpots(createParkingSpotRequestDto, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create a new user.
     * @summary Create New User
     * @param {CreateUserRequestDto} [createUserRequestDto] Post the necessary fields for the API to create a new user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUsers(createUserRequestDto?: CreateUserRequestDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp.postUsers(createUserRequestDto, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Delete a parking spot.
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteParkingSpotsId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteParkingSpotsId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete a user.
   * @summary
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteUsersId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteUsersId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List parking spots closest to a point.
   * @summary Your GET endpoint
   * @param {number} latitude
   * @param {number} longitude
   * @param {number} limit
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getParkingSpotsClosestToPoint(
    latitude: number,
    longitude: number,
    limit: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getParkingSpotsClosestToPoint(latitude, longitude, limit, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a parking spot by id.
   * @summary Your GET endpoint
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getParkingSpotsId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getParkingSpotsId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get a user by id.
   * @summary Get User Info by User ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUsersId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getUsersId(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update the parking spot\'s data.
   * @summary
   * @param {string} id
   * @param {UpdateParkingSpotRequestDto} [updateParkingSpotRequestDto] Updates
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public patchParkingSpotsId(
    id: string,
    updateParkingSpotRequestDto?: UpdateParkingSpotRequestDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .patchParkingSpotsId(id, updateParkingSpotRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update a user\'s data.
   * @summary Update User Information
   * @param {string} id
   * @param {UpdateUserRequestDto} [updateUserRequestDto] Updates
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public patchUsersId(id: string, updateUserRequestDto?: UpdateUserRequestDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .patchUsersId(id, updateUserRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create a parking spot.
   * @summary
   * @param {CreateParkingSpotRequestDto} [createParkingSpotRequestDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postParkingSpots(createParkingSpotRequestDto?: CreateParkingSpotRequestDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .postParkingSpots(createParkingSpotRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create a new user.
   * @summary Create New User
   * @param {CreateUserRequestDto} [createUserRequestDto] Post the necessary fields for the API to create a new user.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postUsers(createUserRequestDto?: CreateUserRequestDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .postUsers(createUserRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
