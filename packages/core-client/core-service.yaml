openapi: 3.0.3
x-stoplight:
  id: dfae6qxcqfx1c
info:
  title: Core Service
  version: '1.0'
  description: Open API Specification for Parker's "Core" Service
  contact:
    name: Yasha Podeszwa
    email: ypodeswa@gmail.com
servers:
  - url: 'http://localhost:3501'
paths:
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-users-id
      description: Get a user by id.
    patch:
      summary: Update User Information
      operationId: patch-users-id
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Update a user's data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Updates
    delete:
      summary: ''
      operationId: delete-users-id
      responses:
        '204':
          description: User deleted
      description: Delete a user.
  /users:
    post:
      summary: Create New User
      operationId: post-users
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  '/parkingSpots/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: Parking spot found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpot'
      operationId: get-parkingSpots-id
      description: Get a parking spot by id.
    patch:
      summary: ''
      operationId: patch-parkingSpots-id
      responses:
        '200':
          description: Parking spot update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpot'
      description: Update the parking spot's data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateParkingSpotRequest'
        description: Updates
    delete:
      summary: ''
      operationId: delete-parkingSpots-id
      responses:
        '204':
          description: Parking spot deleted
      description: Delete a parking spot.
  /parkingSpots:
    post:
      summary: ''
      operationId: post-parkingSpots
      responses:
        '201':
          description: Parking spot created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpot'
      description: Create a parking spot.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParkingSpotRequest'
  /parkingSpots/closestToPoint:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListParkingSpotsResponse'
      operationId: get-parkingSpots-closestToPoint
      parameters:
        - schema:
            type: number
            minimum: -90
            maximum: 90
          in: query
          name: latitude
          required: true
        - schema:
            type: number
            minimum: -180
            maximum: 180
          in: query
          name: longitude
          required: true
        - schema:
            type: number
          in: query
          name: limit
          required: true
      description: List parking spots closest to a point.
    parameters: []
components:
  schemas:
    Pagination:
      title: Pagination
      x-stoplight:
        id: x75ajvcjiyz8t
      type: object
      description: Pagination response
      properties:
        next:
          type: string
          description: Can be used to fetch the next page.
        previous:
          type: string
          description: Can be used to fetch the previous page.
    Point:
      title: Point
      x-stoplight:
        id: ooho5o3trn5py
      type: object
      description: A geographic point (latitude/longitude coordinate)
      properties:
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
      required:
        - latitude
        - longitude
    ParkingSpot:
      title: ParkingSpot
      x-stoplight:
        id: kpotqbl74zl5d
      type: object
      description: A parking spot
      properties:
        id:
          type: string
          format: uuid
        ownerUserId:
          type: string
          format: uuid
        location:
          $ref: '#/components/schemas/Point'
      required:
        - id
        - ownerUserId
        - location
    CreateParkingSpotRequest:
      title: CreateParkingSpotRequest
      x-stoplight:
        id: f4769e3679e3f
      type: object
      description: Payload to create a parking spot
      properties:
        ownerUserId:
          type: string
          format: uuid
        location:
          $ref: '#/components/schemas/Point'
      required:
        - ownerUserId
        - location
    UpdateParkingSpotRequest:
      title: UpdateParkingSpotRequest
      x-stoplight:
        id: 64236b729d207
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Point'
    ListParkingSpotsResponse:
      title: ListParkingSpotsResponse
      x-stoplight:
        id: b2p3twknq2nuq
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ParkingSpot'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - fullName
        - email
      description: A user
    CreateUserRequest:
      title: CreateUserRequest
      x-stoplight:
        id: ce5d69efe588b
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
      required:
        - fullName
        - email
    UpdateUserRequest:
      title: UpdateUserRequest
      x-stoplight:
        id: b724d2336b89e
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
  requestBodies: {}
